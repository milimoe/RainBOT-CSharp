<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FunGame.Core</name>
    </assembly>
    <members>
        <member name="T:Milimoe.FunGame.Core.Api.Transmittal.DataRequest">
            <summary>
            需要配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.DataRequestType"/> 使用<para/>
            如果是 <see cref="T:Milimoe.FunGame.Core.Model.Gaming"/> 的数据请求，则配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.GamingType"/> 使用<para/>
            确保已添加对应的枚举
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.Result">
            <summary>
            数据请求结果
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.Error">
            <summary>
            详细错误信息
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.Worker">
            <summary>
            私有的实现类
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.GamingWorker">
            <summary>
            私有的实现类（这是局内请求的）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.#ctor(Milimoe.FunGame.Core.Library.Common.Network.Socket,Milimoe.FunGame.Core.Library.Constant.DataRequestType,System.Boolean,Milimoe.FunGame.Core.Library.Constant.SocketRuntimeType)">
            <summary>
            基于本地已连接的 <see cref="T:Milimoe.FunGame.Core.Library.Common.Network.Socket"/> 创建新的数据请求<para/>
            使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)"/> 创建一个新的请求
            插件则使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.DataRequestType)"/> 创建一个新的请求<para/>
            </summary>
            <param name="Socket"></param>
            <param name="RequestType"></param>
            <param name="IsLongRunning"></param>
            <param name="RuntimeType"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.#ctor(Milimoe.FunGame.Core.Library.Common.Network.HTTPClient,Milimoe.FunGame.Core.Library.Constant.DataRequestType,System.Boolean,Milimoe.FunGame.Core.Library.Constant.SocketRuntimeType)">
            <summary>
            基于本地已连接的 <see cref="T:Milimoe.FunGame.Core.Library.Common.Network.HTTPClient"/> 创建新的数据请求<para/>
            使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)"/> 创建一个新的请求<para/>
            插件则使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.DataRequestType)"/> 创建一个新的请求<para/>
            此数据请求只能调用异步方法 <see cref="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequestAsync"/> 请求数据
            </summary>
            <param name="WebSocket"></param>
            <param name="RequestType"></param>
            <param name="IsLongRunning"></param>
            <param name="RuntimeType"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.#ctor(Milimoe.FunGame.Core.Library.Common.Network.Socket,Milimoe.FunGame.Core.Library.Constant.GamingType,System.Boolean,Milimoe.FunGame.Core.Library.Constant.SocketRuntimeType)">
            <summary>
            基于本地已连接的 <see cref="T:Milimoe.FunGame.Core.Library.Common.Network.Socket"/> 创建新的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.GamingType)"/> 创建一个新的请求<para/>
            此构造方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的
            </summary>
            <param name="Socket"></param>
            <param name="GamingType"></param>
            <param name="IsLongRunning"></param>
            <param name="RuntimeType"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.#ctor(Milimoe.FunGame.Core.Library.Common.Network.HTTPClient,Milimoe.FunGame.Core.Library.Constant.GamingType,System.Boolean,Milimoe.FunGame.Core.Library.Constant.SocketRuntimeType)">
            <summary>
            基于本地已连接的 <see cref="T:Milimoe.FunGame.Core.Library.Common.Network.HTTPClient"/> 创建新的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            使用 <see cref="T:Milimoe.FunGame.Core.Controller.RunTimeController"/> 中的 <see cref="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.GamingType)"/> 创建一个新的请求<para/>
            此构造方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的<para/>
            此数据请求只能调用异步方法 <see cref="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequestAsync"/> 请求数据
            </summary>
            <param name="WebSocket"></param>
            <param name="GamingType"></param>
            <param name="IsLongRunning"></param>
            <param name="RuntimeType"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.AddRequestData(System.String,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.Dispose">
            <summary>
            长时间运行的数据请求需要在使用完毕后自行关闭
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequest">
            <summary>
            向服务器发送数据请求
            <para/>警告：<see cref="T:Milimoe.FunGame.Core.Library.Common.Network.HTTPClient"/> 调用此方法将抛出异常。请调用并等待 <see cref="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequestAsync"/>
            </summary>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.AsyncRequestException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SendRequestAsync">
            <summary>
            异步向服务器发送数据请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.GetResult``1(System.String)">
            <summary>
            获取指定key对应的反序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.SocketRequest">
            <summary>
            常规数据请求
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.GamingRequest">
            <summary>
            游戏局内请求
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.DataRequest.GetHashtableJsonObject``1(System.Collections.Hashtable,System.String)">
            <summary>
            反序列化Hashtable中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashtable"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.MailSender.MailSenderID">
            <summary>
            邮件服务内部ID
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.MailSender.SmtpClientInfo">
            <summary>
            Smtp客户端信息
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.MailSender.LastestResult">
            <summary>
            上一个邮件发送的结果
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Transmittal.MailSender.ErrorMsg">
            <summary>
            上一个邮件的发送错误信息（如果发送失败）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Transmittal.MailSender._SmtpClientInfo">
            内部变量
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            创建邮件服务
            </summary>
            <param name="SenderMailAddress"></param>
            <param name="SenderName"></param>
            <param name="SenderPassword"></param>
            <param name="Host"></param>
            <param name="Port"></param>
            <param name="OpenSSL"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.CreateMail(System.String,System.String,System.Net.Mail.MailPriority,System.Boolean,System.String[],System.String[],System.String[])">
            <summary>
            创建完整邮件对象
            </summary>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="Priority"></param>
            <param name="HTML"></param>
            <param name="ToList"></param>
            <param name="CCList"></param>
            <param name="BCCList"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.Send(Milimoe.FunGame.Core.Library.Common.Network.MailObject)">
            <summary>
            发送邮件
            </summary>
            <param name="Mail"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.Dispose">
            <summary>
            关闭邮件服务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.MailSender.Dispose(System.Boolean)">
            <summary>
            关闭邮件服务
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper">
            <summary>
            需要在Server中继承此类实现
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Execute">
            <summary>
            执行一个命令
            </summary>
            <returns>影响的行数</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Execute(System.String)">
            <summary>
            执行一个指定的命令
            </summary>
            <param name="Script">命令</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataSet">
            <summary>
            查询DataSet
            </summary>
            <returns>结果集</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataSet(System.String)">
            <summary>
            执行指定的命令查询DataSet
            </summary>
            <param name="Script">命令</param>
            <returns>结果集</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataRow">
            <summary>
            执行指定的命令查询DataRow（可选实现）
            </summary>
            <returns>结果行</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.ExecuteDataRow(System.String)">
            <summary>
            执行指定的命令查询DataRow（可选实现）
            </summary>
            <param name="Script">命令</param>
            <returns>结果行</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.NewTransaction">
            <summary>
            创建一个SQL事务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Transmittal.SQLHelper.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.ActionQueue">
            <summary>
            行动顺序表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.ActionQueue.WriteLine">
            <summary>
            用于文本输出
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._queue">
            <summary>
            当前的行动顺序
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._eliminated">
            <summary>
            当前已死亡的角色顺序(第一个是最早死的)
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._hardnessTimes">
            <summary>
            硬直时间表
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._castingSkills">
            <summary>
            角色正在吟唱的魔法
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._castingSuperSkills">
            <summary>
            角色预释放的爆发技
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._earnedMoney">
            <summary>
            角色目前赚取的金钱
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._continuousKilling">
            <summary>
            角色目前的连杀数
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._cutCount">
            <summary>
            角色被插队次数
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._assistDamage">
            <summary>
            助攻伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.ActionQueue._isGameEnd">
            <summary>
            游戏是否结束
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.#ctor(System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Action{System.String})">
            <summary>
            新建一个行动顺序表
            </summary>
            <param name="characters">参与本次游戏的角色列表</param>
            <param name="writer">用于文本输出</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.AddCharacter(Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean)">
            <summary>
            将角色加入行动顺序表
            </summary>
            <param name="character"></param>
            <param name="hardnessTime"></param>
            <param name="isCheckProtected"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.NextCharacter">
            <summary>
            从行动顺序表取出第一个角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.DisplayQueue">
            <summary>
            显示当前所有角色的状态和硬直时间
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.BeforeTurn(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            回合开始前触发
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.ProcessTurn(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            角色 <paramref name="character"/> 的回合进行中
            </summary>
            <param name="character"></param>
            <returns>是否结束游戏</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.AfterTurn(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            回合结束后触发
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.TimeLapse">
            <summary>
            时间进行流逝，减少硬直时间，减少技能冷却时间，角色也会因此回复状态
            </summary>
            <returns>流逝的时间</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.DamageToEnemy(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult)">
            <summary>
            对敌人造成伤害
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="isNormalAttack"></param>
            <param name="isMagicDamage"></param>
            <param name="magicType"></param>
            <param name="damageResult"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.GetEP(System.Double,System.Double,System.Double)">
            <summary>
            获取EP
            </summary>
            <param name="a">参数1</param>
            <param name="b">参数2</param>
            <param name="max">最大获取量</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.CalculatePhysicalDamage(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean,System.Double,System.Double@)">
            <summary>
            计算物理伤害
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="isNormalAttack"></param>
            <param name="expectedDamage"></param>
            <param name="finalDamage"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.CalculateMagicalDamage(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Double,System.Double@)">
            <summary>
            计算魔法伤害
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="isNormalAttack"></param>
            <param name="magicType"></param>
            <param name="expectedDamage"></param>
            <param name="finalDamage"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.DeathCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            死亡结算
            </summary>
            <param name="killer"></param>
            <param name="death"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.EndGameInfo(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            游戏结束信息
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.CheckCanCast(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,System.Double@)">
            <summary>
            检查是否可以释放技能
            </summary>
            <param name="caster"></param>
            <param name="skill"></param>
            <param name="cost"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.WillPreCastSuperSkill(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            是否在回合外释放爆发技插队
            </summary>
            <param name="character">当前正在行动的角色</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.InterruptCasting(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            打断施法
            </summary>
            <param name="caster"></param>
            <param name="interrupter"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.InitOptional">
            <summary>
            此标记意味着属性允许初始设定，但不是强制的。适用于 <see cref="T:Milimoe.FunGame.Core.Entity.BaseEntity"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.InitRequired">
            <summary>
            此标记意味着属性需要经过初始设定。适用于 <see cref="T:Milimoe.FunGame.Core.Entity.BaseEntity"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1">
            <summary>
            简易的实体模组配置文件生成器<para/>
            仅支持继承了 <see cref="T:Milimoe.FunGame.Core.Entity.BaseEntity"/> 的实体类型，每个 <see cref="T:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1"/> 仅保存一种实体类型的数据
            <para/>文件会保存为：程序目录/configs/<see cref="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.ModuleName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/configs/<paramref name="module_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="module_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.#ctor(System.String,System.String)">
            <summary>
            简易的实体模组配置文件生成器<para/>
            仅支持继承了 <see cref="T:Milimoe.FunGame.Core.Entity.BaseEntity"/> 的实体类型，每个 <see cref="T:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1"/> 仅保存一种实体类型的数据
            <para/>文件会保存为：程序目录/configs/<see cref="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.ModuleName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/configs/<paramref name="module_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="module_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.ModuleName">
            <summary>
            模组的名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.FileName">
            <summary>
            配置文件的名称（后缀将是.json）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.Item(System.String)">
            <summary>
            使用索引器给指定key赋值，不存在key会新增
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.Get(System.String)">
            <summary>
            获取指定key的value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.Add(System.String,`0)">
            <summary>
            添加一个配置，如果已存在key会覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.LoadConfig">
            <summary>
            从配置文件中读取配置。
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.EntityModuleConfig`1.SaveConfig">
            <summary>
            将配置保存到配置文件。调用此方法会覆盖原有的.json，请注意备份
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetCharacter">
            <summary>
            获取角色实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetInventory">
            <summary>
            获取库存实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetSkill">
            <summary>
            获取技能实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetEffect">
            <summary>
            获取技能特效实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetItem">
            <summary>
            获取物品实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetRoom(System.Int64,System.String,System.Nullable{System.DateTime},Milimoe.FunGame.Core.Entity.User,Milimoe.FunGame.Core.Library.Constant.RoomType,System.String,System.String,Milimoe.FunGame.Core.Library.Constant.RoomState,System.Boolean,System.String)">
            <summary>
            获取房间实例
            </summary>
            <param name="Id">房间内部序列号</param>
            <param name="Roomid">房间号</param>
            <param name="CreateTime">创建时间</param>
            <param name="RoomMaster">房主</param>
            <param name="RoomType">房间类型</param>
            <param name="GameModule">游戏模组</param>
            <param name="GameMap"></param>
            <param name="RoomState">房间状态</param>
            <param name="IsRank"></param>
            <param name="Password">房间密码</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetRoom(System.Data.DataRow,Milimoe.FunGame.Core.Entity.User)">
            <summary>
            通过DataSet获取房间实例
            </summary>
            <param name="DrRoom"></param>
            <param name="User"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetRooms(System.Data.DataSet,System.Data.DataSet)">
            <summary>
            通过DataSet获取房间列表
            </summary>
            <param name="DsRoom"></param>
            <param name="DsUser"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetHall">
            <summary>
            获取大厅（-1号房）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetUser">
            <summary>
            获取用户实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetUser(System.Int64,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Double,System.Double,System.String)">
            <summary>
            获取用户实例
            </summary>
            <param name="Id"></param>
            <param name="Username"></param>
            <param name="RegTime"></param>
            <param name="LastTime"></param>
            <param name="Email"></param>
            <param name="NickName"></param>
            <param name="IsAdmin"></param>
            <param name="IsOperator"></param>
            <param name="IsEnable"></param>
            <param name="Credits"></param>
            <param name="Materials"></param>
            <param name="GameTime"></param>
            <param name="AutoKey"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetUser(System.Data.DataSet)">
            <summary>
            获取用户实例
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Factory.GetUser(System.Data.DataRow)">
            <summary>
            获取用户实例
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Modules">
            <summary>
            适用于客户端的模组集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.ServerModules">
            <summary>
            适用于服务器的模组集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Maps">
            <summary>
            游戏地图集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Characters">
            <summary>
            角色表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Skills">
            <summary>
            技能表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Items">
            <summary>
            物品表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.AssociatedServers">
            <summary>
            客户端模组与服务器模组的关联字典
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.ModuleFilePaths">
            <summary>
            已加载的模组DLL名称对应的路径
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.LoadGameModules(Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame,System.Collections.Hashtable,System.Object[])">
            <summary>
            传入 <see cref="T:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame"/> 类型来创建指定端的模组读取器
            <para>runtime = <see cref="F:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame.FunGame_Desktop"/> 时，仅读取 <seealso cref="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Modules"/></para>
            <para>runtime = <see cref="F:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame.FunGame_Server"/> 时，都会读取，并且生成关联字典 <see cref="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.AssociatedServers"/></para>
            <seealso cref="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Maps"/> 都会读取
            </summary>
            <param name="runtime">传入 <see cref="T:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame"/> 类型来创建指定端的模组读取器</param>
            <param name="delegates">用于构建 <see cref="T:Milimoe.FunGame.Core.Controller.AddonController`1"/></param>
            <param name="otherobjs">其他需要传入给插件初始化的对象</param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.Item(System.String)">
            <summary>
            获取对应名称的模组实例
            <para>如果需要取得服务器模组的实例，请调用 <see cref="M:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.GetServerMode(System.String)"/></para>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.GetServerMode(System.String)">
            <summary>
            获取对应名称的服务器模组实例
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.GameModuleLoader.GetGameMap(System.String)">
            <summary>
            获取对应名称的游戏地图
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.NetworkUtility">
            <summary>
            网络服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsIP(System.String)">
            <summary>
            判断字符串是否是IP地址
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsEmail(System.String)">
            <summary>
            判断字符串是否为邮箱地址
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsUserName(System.String)">
            <summary>
            判断字符串是否是正常的用户名（只有中英文和数字）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsChineseName(System.String)">
            <summary>
            判断字符串是否是全中文的字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.GetUserNameLength(System.String)">
            <summary>
            获取用户名长度
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsServerAddress(System.String,System.String@,System.Int32@)">
            <summary>
            判断字符串是否是一个FunGame可接受的服务器地址<para/>
            此方法可以解析域名
            </summary>
            <param name="str"></param>
            <param name="addr"></param>
            <param name="port"></param>
            <returns>返回地址验证结果，同时输出服务器地址和端口号</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.IsServerAddress(System.String,System.Int32)">
            <summary>
            判断参数是否是一个FunGame可接受的服务器地址
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.GetServerPing(System.String)">
            <summary>
            获取服务器的延迟
            </summary>
            <param name="addr">服务器IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.GetIPAddress(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            解析域名为IP地址
            </summary>
            <param name="domain"></param>
            <param name="family"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonSerialize``1(``0)">
            <summary>
            返回目标对象的Json字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonSerialize``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            返回目标对象的Json字符串 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserialize``1(System.String)">
            <summary>
            反序列化Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象 使用 <paramref name="reader"/> 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserializeFromHashtable``1(System.Collections.Hashtable,System.String)">
            <summary>
            反序列化Hashtable中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashtable"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserializeFromIEnumerable``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            反序列化IEnumerable中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserializeFromIEnumerable``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化IEnumerable中的Json对象 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.JsonDeserializeFromHashtable``1(System.Collections.Hashtable,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Hashtable中的Json对象 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashtable"></param>
            <param name="key"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.HttpGet``1(System.String)">
            <summary>
            发送 GET 请求
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.NetworkUtility.HttpPost``1(System.String,System.String)">
            <summary>
            发送 POST 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility">
            <summary>
            时间服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetDateTime(Milimoe.FunGame.Core.Library.Constant.TimeType)">
            <summary>
            获取系统时间
            </summary>
            <param name="type">格式化类型</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetDateTime(System.String)">
            <summary>
            通过字符串转换为DateTime对象
            </summary>
            <param name="format">时间字符串</param>
            <returns>转换失败返回当前时间</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetDateTimeToString(Milimoe.FunGame.Core.Library.Constant.TimeType)">
            <summary>
            获取系统时间并转为字符串
            </summary>
            <param name="type">格式化类型</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetDateTimeToString(System.String)">
            <summary>
            获取系统时间并转为字符串
            </summary>
            <param name="format">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetNowShortTime">
            <summary>
            获取系统短时间
            </summary>
            <returns>时:分:秒</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.DateTimeUtility.GetNowTime">
            <summary>
            获取系统日期
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Encryption">
            <summary>
            加密服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.HmacSha512(System.String,System.String)">
            <summary>
            使用 HMAC-SHA512 算法对文本进行加密
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="key">用于加密的秘钥</param>
            <returns>加密后的 HMAC-SHA512 哈希值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.FileSha512(System.String)">
            <summary>
            计算文件的 SHA-256 哈希值
            </summary>
            <param name="file_path">要计算哈希值的文件路径</param>
            <returns>文件的 SHA-256 哈希值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.RSAEncrypt(System.String,System.String)">
            <summary>
            使用 RSA 算法加密
            </summary>
            <param name="plain_text">明文</param>
            <param name="plublic_key">公钥</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Encryption.RSADecrypt(System.String,System.String)">
            <summary>
            使用 RSA 算法解密
            </summary>
            <param name="secret_text">密文</param>
            <param name="private_key">私钥</param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.StringExtension">
            <summary>
            为字符串（string）添加扩展方法
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.StringExtension.Encrypt(System.String,System.String)">
            <summary>
            使用 HMAC-SHA512 算法对文本进行加密<para/>
            注意：此方法会先将 <paramref name="key" /> 转为小写并计算两次哈希。
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="key">用于加密的秘钥</param>
            <returns>加密后的 HMAC-SHA512 哈希值</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Verification">
            <summary>
            验证码服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Verification.CreateVerifyCode(Milimoe.FunGame.Core.Library.Constant.VerifyCodeType,System.Int32)">
            <summary>
            生成验证码
            </summary>
            <param name="type">类型</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Verification.NumberVerifyCode(System.Int32)">
            <summary>
            数字验证码
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Verification.LetterVerifyCode(System.Int32)">
            <summary>
            字母验证码
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Verification.MixVerifyCode(System.Int32)">
            <summary>
            混合验证码
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.TaskUtility">
            <summary>
            多线程服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskUtility.NewTask(System.Action)">
            <summary>
            开启一个任务：调用返回对象的OnCompleted()方法可以执行后续操作，支持异步
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskUtility.NewTask(System.Func{System.Threading.Tasks.Task})">
            <summary>
            开启一个任务：调用返回对象的OnCompleted()方法可以执行后续操作，支持异步
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TaskUtility.RunTimer(System.Action,System.Int32)">
            <summary>
            开启一个计时器任务
            </summary>
            <param name="action"></param>
            <param name="milliseconds"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Calculation">
            <summary>
            计算服务工具箱
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Calculation.Round(System.Double,System.Int32)">
            <summary>
            四舍五入计算
            </summary>
            <param name="value"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Calculation.Round2Digits(System.Double)">
            <summary>
            四舍五入保留2位小数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Calculation.Round4Digits(System.Double)">
            <summary>
            四舍五入保留4位小数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Calculation.PercentageCheck(System.Double)">
            <summary>
            此方法检查一个 百分比(%) 数值是否存在于 [0,1] 区间
            </summary>
            <param name="value"></param>
            <returns>如果超过0，则返回0；超过1则返回1。</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Implement">
            <summary>
            See: <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceMethod"/>, <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceType"/>, <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceSet"/>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Implement.GetFunGameImplementType(System.Reflection.Assembly,Milimoe.FunGame.Core.Library.Constant.InterfaceType)">
            <summary>
            获取FunGame.Implement.dll中接口的实现方法
            </summary>
            <param name="Assembly">程序集</param>
            <param name="Interface">接口代号</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Implement.GetImplementClassName(Milimoe.FunGame.Core.Library.Constant.InterfaceType)">
            <summary>
            获取接口实现类类名
            </summary>
            <param name="Interface">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Implement.GetImplementMethodName(Milimoe.FunGame.Core.Library.Constant.InterfaceMethod)">
            <summary>
            获取接口方法名（支持属性）
            </summary>
            <param name="Method">方法</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Implement.GetFunGameImplValue(Milimoe.FunGame.Core.Library.Constant.InterfaceType,Milimoe.FunGame.Core.Library.Constant.InterfaceMethod,System.Boolean)">
            <summary>
            公开方法：获取FunGame.Implement.DLL中指定方法（属性）的返回值
            </summary>
            <param name="Interface">接口代号</param>
            <param name="Method">方法代号（支持属性）</param>
            <param name="IsMethod">是否是方法（如是属性请传入false）</param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.JsonTool">
            <summary>
            创建一个Json工具类<para/>
            此工具类拥有单独的序列化选项，支持添加自定义转换器 <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/><para/>
            <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/> 继承自 <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.JsonTool.JsonSerializerOptions">
            <summary>
            序列化选项<para/>
            已经默认添加了下列转换器：<para/>
            <see cref="T:Milimoe.FunGame.Core.Library.Common.JsonConverter.DateTimeConverter"/>, <see cref="T:Milimoe.FunGame.Core.Library.Common.JsonConverter.DataTableConverter"/>, <see cref="T:Milimoe.FunGame.Core.Library.Common.JsonConverter.DataSetConverter"/>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.AddConverter(System.Text.Json.Serialization.JsonConverter)">
            <summary>
            注册一个自定义转换器，支持 <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/>
            </summary>
            <param name="converter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.AddConverters(System.Collections.Generic.IEnumerable{System.Text.Json.Serialization.JsonConverter})">
            <summary>
            注册多个自定义转换器，支持 <see cref="T:Milimoe.FunGame.Core.Library.Common.Architecture.BaseEntityConverter`1"/>
            </summary>
            <param name="converters"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetString``1(``0)">
            <summary>
            获取Json字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetObject``1(System.String)">
            <summary>
            反序列化Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetObject(System.String)">
            <summary>
            反序列化Json对象，此方法可能无法返回正确的类型，请注意辨别
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetObject``1(System.Collections.Hashtable,System.String)">
            <summary>
            反序列化Hashtable中Key对应的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.JsonDeserializeFromIEnumerable``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            反序列化IEnumerable中的Json对象 可指定反序列化选项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.JsonTool.GetObjects``1(System.String)">
            <summary>
            反序列化多个Json对象
            注意必须是相同的Json对象才可以使用此方法解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.JsonTool.options">
            <summary>
            Private JsonSerializerOptions
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.PluginConfig">
            <summary>
            简易的插件配置文件生成器<para/>
            仅支持部分基本类型（<see cref="T:System.Int64"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>）及其数组（<see cref="T:System.Collections.Generic.List`1">List&lt;long&gt;, List&lt;double&gt;, List&lt;decimal&gt;, List&lt;string&gt;, List&lt;bool&gt;</see>和<see cref="T:System.Array">long[], double[], decimal[], string[], bool[]</see>）
            <para/>文件会保存为：程序目录/configs/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.PluginName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/configs/<paramref name="plugin_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="plugin_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.#ctor(System.String,System.String)">
            <summary>
            简易的插件配置文件生成器<para/>
            仅支持部分基本类型（<see cref="T:System.Int64"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>）及其数组（<see cref="T:System.Collections.Generic.List`1">List&lt;long&gt;, List&lt;double&gt;, List&lt;decimal&gt;, List&lt;string&gt;, List&lt;bool&gt;</see>和<see cref="T:System.Array">long[], double[], decimal[], string[], bool[]</see>）
            <para/>文件会保存为：程序目录/configs/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.PluginName"/>/<see cref="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.FileName"/>.json
            </summary>
            <remarks>
            新建一个配置文件，文件会保存为：程序目录/configs/<paramref name="plugin_name"/>/<paramref name="file_name"/>.json
            </remarks>
            <param name="plugin_name"></param>
            <param name="file_name"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.PluginName">
            <summary>
            插件的名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.FileName">
            <summary>
            配置文件的名称（后缀将是.json）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginConfig.Item(System.String)">
            <summary>
            使用索引器给指定key赋值，不存在key会新增
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.Parse``1(System.String)">
            <summary>
            如果保存了对象，请使用此方法转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.GetValue(System.String)">
            <summary>
            获取指定key的value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.Get``1(System.String)">
            <summary>
            使用泛型获取指定key的value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.Add(System.String,System.Object)">
            <summary>
            添加一个配置，如果已存在key会覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.LoadConfig">
            <summary>
            从配置文件中读取配置。
            注意：所有保存时为数组的对象都会变成<see cref="T:System.Collections.Generic.List`1"/>对象，并且不支持<see cref="T:System.Object"/>类型
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.SaveConfig">
            <summary>
            将配置保存到配置文件。调用此方法会覆盖原有的.json，请注意备份
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.AddValue(System.String,System.Text.Json.JsonElement)">
            <summary>
            Json反序列化的方法
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginConfig.AddValues(System.String,System.Text.Json.JsonElement.ArrayEnumerator)">
            <summary>
            Json数组反序列化的方法。不支持<see cref="T:System.Object"/>数组。
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginLoader.Plugins">
            <summary>
            已读取的插件列表
            <para>key 是 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Name"/></para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Api.Utility.PluginLoader.PluginFilePaths">
            <summary>
            已加载的插件DLL名称对应的路径
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.PluginLoader.LoadPlugins(System.Collections.Hashtable,System.Object[])">
            <summary>
            构建一个插件读取器并读取插件
            </summary>
            <param name="delegates">用于构建 <see cref="T:Milimoe.FunGame.Core.Controller.AddonController`1"/></param>
            <param name="otherobjs">其他需要传入给插件初始化的对象</param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.Singleton">
            <summary>
            单例表：表中的对象以类名作为Key保存，并以Key获取该对象，Key具有唯一约束
            用于储存单例对象使用
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.IsExist(System.Object)">
            <summary>
            查询目标的类是否已经有实例
            </summary>
            <param name="single">单例对象</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.Add(System.Object)">
            <summary>
            将目标和目标的类添加至单例表
            </summary>
            <param name="single">单例对象</param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.SingletonAddException">添加单例到单例表时遇到错误</exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.Remove(System.Object)">
            <summary>
            将目标和目标的类从单例表中移除
            </summary>
            <param name="single">单例对象</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.Get``1">
            <summary>
            获取单例对象
            </summary>
            <typeparam name="T">目标类</typeparam>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.SingletonGetException">不能从单例表中获取到指定的单例</exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.Singleton.Get(System.Type)">
            <summary>
            获取单例对象
            </summary>
            <param name="type">目标类</param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.SingletonGetException">不能从单例表中获取到指定的单例</exception>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.INIHelper.DefaultFileName">
            <summary>
            默认的配置文件名称
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.INIHelper.WriteINI(System.String,System.String,System.String,System.String)">
            <summary>
            写入ini文件
            </summary>
            <param name="Section">Section</param>
            <param name="Key">键</param>
            <param name="Value">值</param>
            <param name="FileName">文件名，缺省为FunGame.ini</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.INIHelper.ReadINI(System.String,System.String,System.String)">
            <summary>
            读取ini文件
            </summary>
            <param name="Section">Section</param>
            <param name="Key">键</param>
            <param name="FileName">文件名，缺省为FunGame.ini</param>
            <returns>读取到的值</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.INIHelper.ExistINIFile(System.String)">
            <summary>
            查询ini文件是否存在
            </summary>
            <param name="FileName">文件名，缺省为FunGame.ini</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.INIHelper.Init(Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame)">
            <summary>
            初始化ini模板文件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TXTHelper.ReadTXT(System.String,System.String)">
            <summary>
            读取TXT文件内容
            </summary>
            <param name="filename">文件名（需要包含扩展名）</param>
            <param name="path">相对路径</param>
            <returns>内容</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TXTHelper.WriteTXT(System.String,System.String,System.String,System.Boolean)">
            <summary>
            写入TXT文件内容（如不存在文件会创建）<para/>
            <paramref name="overwrite" /> 选项用于覆盖或追加文本
            </summary>
            <param name="content"></param>
            <param name="filename">文件名（需要包含扩展名）</param>
            <param name="path">相对路径</param>
            <param name="overwrite">是否覆盖</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TXTHelper.OverwriteTXT(System.String,System.String,System.String)">
            <summary>
            写入并覆盖TXT文件内容
            </summary>
            <param name="content"></param>
            <param name="filename">文件名（需要包含扩展名）</param>
            <param name="path">相对路径</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TXTHelper.AppendErrorLog(System.String)">
            <summary>
            追加错误日志 默认写入logs文件夹下的当日日期.log文件
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator">
            <summary>
            Aka. 2FA 双重认证 双因素身份验证
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.SQLHelper">
            <summary>
            SQLHelper 允许为空
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.#ctor">
            <summary>
            不使用SQL模式
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.#ctor(Milimoe.FunGame.Core.Api.Transmittal.SQLHelper)">
            <summary>
            使用SQL模式 记录对应账号的密文到数据库中
            </summary>
            <param name="SQLHelper"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.IsAvailable(System.String)">
            <summary>
            检查账号是否需要2FA
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.Authenticate(System.String,System.String)">
            <summary>
            2FA验证
            </summary>
            <param name="username"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.INTERVAL_SECONDS">
            <summary>
            每30秒刷新
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.DIGITS">
            <summary>
            6位数字2FA验证码
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.PUBLICKEY">
            <summary>
            ----- PUBLIC KEY -----
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.SECRETSIGN">
            <summary>
            ----- SECRET SIGN -----
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.CreateSecretKey(System.String)">
            <summary>
            创键私钥，用于绑定账号，并生成两个文件，需要用户保存
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.Base32Encode(System.Byte[])">
            <summary>
            生成随机秘钥字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.GenerateCode(System.String)">
            <summary>
            生成基于当前时间戳的6位数字2FA验证码
            </summary>
            <param name="secretKey"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.GetCurrentCounter">
            <summary>
            获取当前时间节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.Base32Decode(System.String)">
            <summary>
            生成验证码
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Api.Utility.TwoFactorAuthenticator.SplitKeyFile(System.String,System.String[]@)">
            <summary>
            拆分字符串中的密文和私钥
            </summary>
            <param name="content"></param>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.AddonController`1">
            <summary>
            这个控制器在Base的基础上添加了DataRequest
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.AddonController`1.MaskMethod_NewDataRequest">
            <summary>
            基于本地已连接的Socket创建新的数据请求
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.AddonController`1.MaskMethod_NewLongRunningDataRequest">
            <summary>
            基于本地已连接的Socket创建长时间运行的数据请求
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.AddonController`1.MaskMethod_NewGamingRequest">
            <summary>
            基于本地已连接的Socket创建新的局内数据请求
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.AddonController`1.MaskMethod_NewLongRunningGamingRequest">
            <summary>
            基于本地已连接的Socket创建长时间运行的局内数据请求
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建新的数据请求<para/>
            此方法只允许插件调用，如果是模组和模组服务器调用此方法将抛出异常
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.InvalidNewDataRequestException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.NewLongRunningDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的数据请求<para/>
            此方法只允许插件调用，如果是模组和模组服务器调用此方法将抛出异常
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.InvalidNewDataRequestException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            基于本地已连接的Socket创建新的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            此方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的，但是 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/> 也能调用<para/>
            模组服务器调用此方法将抛出异常
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
            <exception cref="T:Milimoe.FunGame.InvalidNewDataRequestException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.NewLongRunningDataRequest(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            此方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的，但是 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/> 也能调用<para/>
            模组服务器调用此方法将抛出异常
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
            <exception cref="T:Milimoe.FunGame.InvalidNewDataRequestException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.AddonController`1.#ctor(Milimoe.FunGame.Core.Interface.Addons.IAddon,System.Collections.Hashtable)">
            <summary>
            新建一个AddonController
            </summary>
            <param name="addon"></param>
            <param name="delegates"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.BaseAddonController`1">
            <summary>
            这是通用的控制器，仅提供基本功能
            </summary>
            <typeparam name="T">Addon的类型，如<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/>或者<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/></typeparam>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.BaseAddonController`1.Addon">
            <summary>
            控制器的本体
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.BaseAddonController`1.MaskMethod_WriteLine">
            <summary>
            输出系统消息
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.BaseAddonController`1.MaskMethod_Error">
            <summary>
            输出错误消息
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.WriteLine(System.String)">
            <summary>
            输出系统消息
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.Error(System.Exception)">
            <summary>
            输出错误消息
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.#ctor(Milimoe.FunGame.Core.Interface.Addons.IAddon,System.Collections.Hashtable)">
            <summary>
            新建一个BaseAddonController
            </summary>
            <param name="addon"></param>
            <param name="delegates"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.DefaultPrint(System.String)">
            <summary>
            默认的输出错误消息方法
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.BaseAddonController`1.DefaultPrint(System.Exception)">
            <summary>
            输出错误消息
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.RunTimeController">
            <summary>
            此类实现服务器连接、断开连接、心跳检测、创建数据请求等功能
            -- 需要继承并实现部分方法 --
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.RunTimeController.Socket">
            <summary>
            与服务器的连接套接字实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.RunTimeController.Connected">
            <summary>
            套接字是否已经连接
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.RunTimeController._ReceivingTask">
            <summary>
            接收服务器信息的线程
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.RunTimeController._Socket">
            <summary>
            用于类内赋值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.RunTimeController._IsReceiving">
            <summary>
            是否正在接收服务器信息
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Disconnect">
            <summary>
            断开服务器连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.EndGame">
            <summary>
            发送结束游戏反馈
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Connect(System.String,System.Int32)">
            <summary>
            连接服务器
            </summary>
            <param name="addr"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.GetServerAddress">
            <summary>
            获取服务器地址
            </summary>
            <returns>string：IP地址；int：端口号</returns>
            <exception cref="T:Milimoe.FunGame.FindServerFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.BeforeConnect(System.String@,System.Int32@,System.Collections.ArrayList)">
            <summary>
            此方法将在连接服务器前触发<para/>
            客户端可以重写此方法
            </summary>
            <param name="ip">服务器IP</param>
            <param name="port">服务器端口</param>
            <param name="args">重写时可以提供额外的连接参数</param>
            <returns>false：中止连接</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.AfterConnect(System.Collections.ArrayList)">
            <summary>
            此方法将在连接服务器后触发（Connect结果返回前）<para/>
            客户端可以重写此方法
            </summary>
            <param name="ConnectArgs">连接服务器后返回的一些数据，可以使用也可以修改它们</param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.AutoLogin(System.String,System.String,System.String)">
            <summary>
            客户端需要自行实现自动登录的事务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Close">
            <summary>
            关闭所有连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.WritelnSystemInfo(System.String)">
            <summary>
            输出消息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Error(System.Exception)">
            <summary>
            自定处理异常的方法
            -- 一般放在catch中 --
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建新的数据请求
            </summary>
            <param name="RequestType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewLongRunningDataRequest(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的数据请求
            </summary>
            <param name="RequestType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建新的数据请求<para/>
            加载项专用（<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/> / <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/>）
            </summary>
            <param name="RequestType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewLongRunningDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的数据请求
            加载项专用（<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/> / <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/>）
            </summary>
            <param name="RequestType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            基于本地已连接的Socket创建新的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            加载项专用：此方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的
            </summary>
            <param name="GamingType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.NewLongRunningDataRequestForAddon(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            基于本地已连接的Socket创建长时间运行的局内（<see cref="T:Milimoe.FunGame.Core.Model.Gaming"/>）数据请求<para/>
            加载项专用：此方法是给 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 提供的
            </summary>
            <param name="GamingType"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.ConnectFailedException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.StartReceiving">
            <summary>
            开始接收服务器信息
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.GetServerMessage">
            <summary>
            获取服务器已发送的信息为SocketObject数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.Receiving">
            <summary>
            具体接收服务器信息以及处理信息的方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_Disconnect(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收服务器断开连接的通知
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_System(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理服务器系统消息
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_HeartBeat(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理服务器心跳
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_ForceLogout(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收强制退出登录的通知
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_Chat(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理聊天信息
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_UpdateRoomMaster(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理更换房主信息
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_MatchRoom(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理匹配房间成功信息
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_StartGame(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理开始游戏信息
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_EndGame(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理游戏结束信息
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.RunTimeController.SocketHandler_Gaming(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            客户端接收并处理局内消息
            </summary>
            <param name="ServerMessage"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.SocketHandlerController">
            <summary>
            <para>继承 AsyncAwaiter 用法：</para>
            <para>1、调用Socket.Send()前，请设置为等待状态：SetWorking();</para>
            <para>2、调用Socket.Send() == Success后，请等待任务完成：WaitForWorkDone();</para>
            <para>3、在其他任何地方修改Working状态，均会使任务终止。</para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Controller.SocketHandlerController.Work">
            <summary>
            接收到的SocketObject实例
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.SocketHandlerController._Socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.SocketHandlerController._WebSocket">
            <summary>
            WebSocket
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.#ctor(Milimoe.FunGame.Core.Library.Common.Network.Socket)">
            <summary>
            继承请调用base构造
            </summary>
            <param name="socket">Socket</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.#ctor(Milimoe.FunGame.Core.Library.Common.Network.HTTPClient)">
            <summary>
            继承请调用base构造
            </summary>
            <param name="websocket">Socket</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.SocketHandler(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            继承请重写此方法
            </summary>
            <param name="SocketObject">SocketObject</param>
        </member>
        <member name="F:Milimoe.FunGame.Core.Controller.SocketHandlerController.IsDisposed">
            <summary>
            判断是否已经Disposed
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.Dispose">
            <summary>
            公开的Dispose方法
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.Dispose(System.Boolean)">
            <summary>
            关闭时
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="T:Milimoe.FunGame.Core.Controller.SocketHandlerController.DisposedEvent">
            <summary>
            关闭事件
            </summary>
        </member>
        <member name="E:Milimoe.FunGame.Core.Controller.SocketHandlerController.Disposed">
            <summary>
            <para>Controller关闭时事件</para>
            <para>不建议new Dispose()方法，建议使用事件</para>
            <para>事件会在base.Dispose()执行前触发</para>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Controller.SocketHandlerController.OnDisposed">
            <summary>
            触发关闭事件
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.BaseEntity.Id">
            <summary>
            实体的数字ID
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.BaseEntity.Guid">
            <summary>
            实体的唯一ID
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.BaseEntity.Name">
            <summary>
            实体的名称
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.AssistDetail">
            <summary>
            用于记录对哪个角色造成了多少伤害
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.AssistDetail.Character">
            <summary>
            此详情类属于哪个角色
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.AssistDetail.#ctor(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.IEnumerable{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            初始化一个助攻详情类
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.AssistDetail.Item(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取和设置对 <paramref name="enemy"/> 的伤害
            </summary>
            <param name="enemy"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.AssistDetail.GetPercentage(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获取对 <paramref name="enemy"/> 的伤害
            </summary>
            <param name="enemy"></param>
            <returns>目标的 <see cref="P:Milimoe.FunGame.Core.Entity.Character.MaxHP"/> 的百分比形式</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Character">
            <summary>
            角色需要使用 Factory.Get 的方式来构造，并赋值 <see cref="T:Milimoe.FunGame.Core.Api.Utility.InitRequired"/> 标记的属性<para />
            在使用时仅需要调用 <see cref="M:Milimoe.FunGame.Core.Entity.Character.Copy"/> 方法即可获得相同对象<para />
            不建议继承
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Name">
            <summary>
            角色的姓
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.FirstName">
            <summary>
            角色的名字
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.NickName">
            <summary>
            角色的昵称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.User">
            <summary>
            角色所属的玩家
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Profile">
            <summary>
            角色的详细资料
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.EquipSlot">
            <summary>
            角色的详细资料
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MagicType">
            <summary>
            魔法属性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.FirstRoleType">
            <summary>
            角色定位1
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.SecondRoleType">
            <summary>
            角色定位2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ThirdRoleType">
            <summary>
            角色定位3
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.RoleRating">
            <summary>
            角色评级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Promotion">
            <summary>
            晋升点数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.PrimaryAttribute">
            <summary>
            核心属性
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Level">
            <summary>
            等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.EXP">
            <summary>
            经验值
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CharacterState">
            <summary>
            角色目前所处的状态 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CharacterEffectStates">
            <summary>
            角色目前被特效施加的状态 [ 用于设置角色是否被控制的状态 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CharacterEffectControlTypes">
            <summary>
            角色目前被特效施加的控制效果 [ 用于特效判断是否需要在移除特效时更改角色状态 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.IsNeutral">
            <summary>
            角色是否是中立的 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.IsUnselectable">
            <summary>
            角色是否是不可选中的 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialHP">
            <summary>
            初始生命值 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseHP">
            <summary>
            基础生命值 [ 与初始设定和等级相关 ] [ 与基础力量相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExHP">
            <summary>
            额外生命值 [ 与额外力量相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExHP2">
            <summary>
            额外生命值2 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MaxHP">
            <summary>
            最大生命值 = 基础生命值 + 额外生命值 + 额外生命值2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.HP">
            <summary>
            当前生命值 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialMP">
            <summary>
            初始魔法值 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseMP">
            <summary>
            基础魔法值 [ 与初始设定和等级相关 ] [ 与基础智力相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExMP">
            <summary>
            额外魔法值 [ 与额外智力相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExMP2">
            <summary>
            额外魔法值2 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MaxMP">
            <summary>
            最大魔法值 = 基础魔法值 + 额外魔法值 + 额外魔法值2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MP">
            <summary>
            当前魔法值 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.EP">
            <summary>
            当前爆发能量 [ 战斗相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialATK">
            <summary>
            初始攻击力 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseATK">
            <summary>
            基础攻击力 [ 与初始设定和等级相关 ] [ 与核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExATK">
            <summary>
            额外攻击力 [ 与额外核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExATK2">
            <summary>
            额外攻击力2 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ATK">
            <summary>
            攻击力 = 基础攻击力 + 额外攻击力 + 额外攻击力2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialDEF">
            <summary>
            初始物理护甲 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseDEF">
            <summary>
            基础物理护甲 [ 与初始设定相关 ] [ 与基础力量相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExDEF">
            <summary>
            额外物理护甲 [ 与额外力量相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExDEF2">
            <summary>
            额外物理护甲2 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.DEF">
            <summary>
            物理护甲 = 基础物理护甲 + 额外物理护甲 + 额外物理护甲2
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.PDR">
            <summary>
            物理伤害减免(%) = [ 与物理护甲相关 ] + 额外物理伤害减免(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExPDR">
            <summary>
            额外物理伤害减免(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MDF">
            <summary>
            魔法抗性(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.PhysicalPenetration">
            <summary>
            物理穿透(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MagicalPenetration">
            <summary>
            魔法穿透(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialHR">
            <summary>
            初始生命回复力 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.HR">
            <summary>
            生命回复力 = [ 与初始设定相关 ] [ 与力量相关 ] + 额外生命回复力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExHR">
            <summary>
            额外生命回复力 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialMR">
            <summary>
            初始魔法回复力 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.MR">
            <summary>
            魔法回复力 = [ 与初始设定相关 ] [ 与智力相关 ] + 额外魔法回复力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExMR">
            <summary>
            额外魔法回复力 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ER">
            <summary>
            能量回复力 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.PrimaryAttributeValue">
            <summary>
            核心属性的值 [ 核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BasePrimaryAttributeValue">
            <summary>
            基础核心属性的值 [ 核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExPrimaryAttributeValue">
            <summary>
            额外核心属性的值 [ 核心属性相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialSTR">
            <summary>
            初始力量 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialAGI">
            <summary>
            初始敏捷 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialINT">
            <summary>
            初始智力 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseSTR">
            <summary>
            基础力量 [ 与初始设定和等级相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseAGI">
            <summary>
            基础敏捷 [ 与初始设定和等级相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.BaseINT">
            <summary>
            基础智力 [ 与初始设定和等级相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExSTR">
            <summary>
            额外力量 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExAGI">
            <summary>
            额外敏捷 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExINT">
            <summary>
            额外智力 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.STR">
            <summary>
            力量 = 基础力量 + 额外力量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.AGI">
            <summary>
            敏捷 = 基础敏捷 + 额外敏捷
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.INT">
            <summary>
            智力 = 基础智力 + 额外智力
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.STRGrowth">
            <summary>
            力量成长值(+BaseSTR/Lv)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.AGIGrowth">
            <summary>
            敏捷成长值(+BaseAGI/Lv)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.INTGrowth">
            <summary>
            智力成长值(+BaseINT/Lv)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.InitialSPD">
            <summary>
            行动速度 [ 初始设定 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.SPD">
            <summary>
            行动速度 = [ 与初始设定相关 ][ 与敏捷相关 ] + 额外行动速度
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExSPD">
            <summary>
            额外行动速度 [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ActionCoefficient">
            <summary>
            行动系数(%) = [ 与速度相关 ] + 额外行动系数(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExActionCoefficient">
            <summary>
            额外行动系数(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.AccelerationCoefficient">
            <summary>
            加速系数(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CDR">
            <summary>
            冷却缩减(%) = [ 与智力相关 ] + 额外冷却缩减(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExCDR">
            <summary>
            额外冷却缩减(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ATR">
            <summary>
            攻击距离 [ 与技能和物品相关 ] [ 单位：格 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CritRate">
            <summary>
            暴击率(%) = [ 与敏捷相关 ] + 额外暴击率(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExCritRate">
            <summary>
            额外暴击率(%)  [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.CritDMG">
            <summary>
            暴击伤害(%) = [ 与力量相关 ] + 额外暴击伤害(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExCritDMG">
            <summary>
            额外暴击伤害(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.EvadeRate">
            <summary>
            闪避率(%) = [ 与敏捷相关 ] + 额外闪避率(%)
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.ExEvadeRate">
            <summary>
            额外闪避率(%) [ 与技能和物品相关 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.NormalAttack">
            <summary>
            普通攻击对象
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Skills">
            <summary>
            角色的技能列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Effects">
            <summary>
            角色的持续性特效列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Character.Items">
            <summary>
            角色携带的物品
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._Level">
            ===== 私有变量 =====
            <summary>
            等级
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._HP">
            <summary>
            生命值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._MP">
            <summary>
            魔法值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._EP">
            <summary>
            能量值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._PhysicalPenetration">
            <summary>
            物理穿透
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Character._MagicalPenetration">
            <summary>
            魔法穿透
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Recovery(System.Double)">
            <summary>
            回复状态至满
            </summary>
            <param name="EP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Recovery(System.Int32,System.Double)">
            <summary>
            按时间回复状态
            </summary>
            <param name="time"></param>
            <param name="EP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Recovery(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            按当前百分比回复状态（一般在属性变化时调用）
            </summary>
            <param name="pastHP"></param>
            <param name="pastMP"></param>
            <param name="pastMaxHP"></param>
            <param name="pastMaxMP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.OnAttributeChanged">
            <summary>
            角色的属性发生变化，会影响特殊效果的计算
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            比较一个角色（只比较 <see cref="M:Milimoe.FunGame.Core.Entity.Character.ToString"/>）
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.ToString">
            <summary>
            获取角色实例的名字、昵称以及所属玩家
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.ToStringWithLevel">
            <summary>
            获取角色实例的名字、昵称以及所属玩家，包含等级
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetName(System.Boolean)">
            <summary>
            获取角色的名字
            </summary>
            <param name="full"></param>
            <returns>如果 <paramref name="full"/> = false，返回 <see cref="P:Milimoe.FunGame.Core.Entity.Character.FirstName"/>；反之，返回 <see cref="P:Milimoe.FunGame.Core.Entity.Character.Name"/> + <see cref="P:Milimoe.FunGame.Core.Entity.Character.FirstName"/>。</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetInfo">
            <summary>
            获取角色的详细信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.GetInBattleInfo(System.Double)">
            <summary>
            获取战斗状态的信息
            </summary>
            <param name="hardnessTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.UpdateCharacterState">
            <summary>
            更新角色的状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Character.Copy">
            <summary>
            复制一个角色
            [ 推荐从模组中复制后使用对象 ]
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.CharacterProfile">
            <summary>
            角色的一些个人信息
            </summary>
            <param name="name"></param>
            <param name="firstname"></param>
            <param name="nickname"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.CharacterProfile.#ctor(System.String,System.String,System.String)">
            <summary>
            角色的一些个人信息
            </summary>
            <param name="name"></param>
            <param name="firstname"></param>
            <param name="nickname"></param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Name">
            <summary>
            角色的姓
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.FirstName">
            <summary>
            角色的名字
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.NickName">
            <summary>
            角色的昵称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Birthplace">
            <summary>
            角色的出生地
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Birthday">
            <summary>
            角色的出生日期
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Status">
            <summary>
            角色的身份
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Affiliation">
            <summary>
            角色的隶属
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Sex">
            <summary>
            角色的性别
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Height">
            <summary>
            角色的身高
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Weight">
            <summary>
            角色的体重
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.CharacterProfile.Stories">
            <summary>
            角色的故事
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.EquipSlot">
            <summary>
            角色的装备槽位
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.EquipSlot.#ctor">
            <summary>
            角色的装备槽位
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.MagicCardPack">
            <summary>
            魔法卡包
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Weapon">
            <summary>
            武器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Armor">
            <summary>
            防具
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Shoes">
            <summary>
            鞋子
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Accessory1">
            <summary>
            饰品1
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.EquipSlot.Accessory2">
            <summary>
            饰品2
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.MagicResistance">
            <summary>
            角色的魔法抗性，对不同的魔法类型有不同抗性
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.MagicResistance.#ctor">
            <summary>
            角色的魔法抗性，对不同的魔法类型有不同抗性
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Item">
            <summary>
            和 <see cref="T:Milimoe.FunGame.Core.Entity.Skill"/> 一样，需要继承构造
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Description">
            <summary>
            物品的描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.ItemType">
            <summary>
            物品类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.EquipSlotType">
            <summary>
            物品槽位
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Price">
            <summary>
            物品的价格
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Key">
            <summary>
            快捷键
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.IsActive">
            <summary>
            是否是主动物品
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Enable">
            <summary>
            是否可用（涉及冷却和禁用等）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Character">
            <summary>
            物品所属的角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Item.Skills">
            <summary>
            物品拥有的技能
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.OnItemGained">
            <summary>
            当获得物品时
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.UseItem(Milimoe.FunGame.Core.Api.Utility.ActionQueue,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            局内使用物品触发
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.UseItem">
            <summary>
            局外（库存）使用物品触发
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.OnItemUsed">
            <summary>
            当物品被使用时
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Item.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            判断两个物品是否相同 检查Id.Name
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.SkillGroup">
            <summary>
            物品只有一个主动技能，但是可以有很多个被动技能
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.SkillGroup.Active">
            <summary>
            唯一的主动技能
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.SkillGroup.Passive">
            <summary>
            被动技能组
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Effect">
            <summary>
            特殊效果类，需要继承
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Skill">
            <summary>
            所属的技能
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.ControlType">
            <summary>
            特殊效果类型<para/>
            注意：如果技能特效没有原生施加控制效果，请始终保持此属性为 <see cref="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.None"/>。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.TargetSelf">
            <summary>
            作用于自身
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.TargetCount">
            <summary>
            作用目标数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.TargetRange">
            <summary>
            作用范围
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Durative">
            <summary>
            持续性的<para/>
            配合 <see cref="P:Milimoe.FunGame.Core.Entity.Effect.Duration"/> 使用，而不是 <see cref="P:Milimoe.FunGame.Core.Entity.Effect.DurationTurn"/>。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Duration">
            <summary>
            持续时间<para/>
            配合 <see cref="P:Milimoe.FunGame.Core.Entity.Effect.Durative"/> 使用。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.DurationTurn">
            <summary>
            持续时间（回合）<para/>
            使用此属性需要将 <see cref="P:Milimoe.FunGame.Core.Entity.Effect.Durative"/> 设置为 false。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.RemainDuration">
            <summary>
            剩余持续时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.RemainDurationTurn">
            <summary>
            剩余持续时间（回合）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.MagicType">
            <summary>
            魔法类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Description">
            <summary>
            效果描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Level">
            <summary>
            等级，跟随技能的等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.Source">
            <summary>
            此特效的施加者，用于溯源
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.ActionQueue">
            <summary>
            游戏中的行动顺序表实例，在技能效果被触发时，此实例会获得赋值，使用时需要判断其是否存在
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Effect.WriteLine">
            <summary>
            输出文本或日志
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnEffectGained(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            获得此特效时
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnEffectLost(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            失去此特效时
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterDamageTypeBeforeCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean@,System.Boolean@,Milimoe.FunGame.Core.Library.Constant.MagicType@)">
            <summary>
            在伤害计算前修改伤害类型
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="isNormalAttack"></param>
            <param name="isMagicDamage"></param>
            <param name="magicType"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterExpectedDamageBeforeCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double@,System.Boolean,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType)">
            <summary>
            在伤害计算前修改预期伤害
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="isNormalAttack"></param>
            <param name="isMagicDamage"></param>
            <param name="magicType"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterActualDamageAfterCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double@,System.Boolean,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult)">
            <summary>
            在伤害计算完成后修改实际伤害 [ 允许取消伤害 ]
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="isNormalAttack"></param>
            <param name="isMagicDamage"></param>
            <param name="magicType"></param>
            <param name="damageResult"></param>
            <returns>返回 true 表示取消此伤害，等同于闪避</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterHardnessTimeAfterNormalAttack(Milimoe.FunGame.Core.Entity.Character,System.Double@,System.Boolean@)">
            <summary>
            在完成普通攻击动作之后修改硬直时间
            </summary>
            <param name="character"></param>
            <param name="baseHardnessTime"></param>
            <param name="isCheckProtected"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterHardnessTimeAfterCastSkill(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,System.Double@,System.Boolean@)">
            <summary>
            在完成释放技能动作之后修改硬直时间
            </summary>
            <param name="character"></param>
            <param name="skill"></param>
            <param name="baseHardnessTime"></param>
            <param name="isCheckProtected"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterEPAfterDamage(Milimoe.FunGame.Core.Entity.Character,System.Double@)">
            <summary>
            在造成伤害时，修改获得的能量
            </summary>
            <param name="character"></param>
            <param name="baseEP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterEPAfterGetDamage(Milimoe.FunGame.Core.Entity.Character,System.Double@)">
            <summary>
            在受到伤害时，修改获得的能量
            </summary>
            <param name="character"></param>
            <param name="baseEP"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnSkillCasting(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            技能开始吟唱时 [ 爆发技插队可触发此项 ]
            </summary>
            <param name="caster"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnSkillCastInterrupted(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Skill,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            技能吟唱被打断时
            </summary>
            <param name="caster"></param>
            <param name="skill"></param>
            <param name="interrupter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnSkillCasted(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            吟唱结束后释放技能（魔法）/ 直接释放技能（战技/爆发技）
            </summary>
            <param name="caster"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="others"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnTimeElapsed(Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            时间流逝时
            </summary>
            <param name="character"></param>
            <param name="elapsed"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AfterDamageCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult)">
            <summary>
            在完成伤害结算后
            </summary>
            <param name="character"></param>
            <param name="enemy"></param>
            <param name="damage"></param>
            <param name="isNormalAttack"></param>
            <param name="isMagicDamage"></param>
            <param name="magicType"></param>
            <param name="damageResult"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnTurnStart(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            在特效持有者的回合开始前
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnTurnEnd(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            在特效持有者的回合结束后
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnSkillLevelUp(Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            技能被升级时
            </summary>
            <param name="character"></param>
            <param name="level"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnOwnerLevelUp(Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            特效持有者升级时
            </summary>
            <param name="owner"></param>
            <param name="level"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AfterDeathCalculation(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Character,System.Int32},System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Character,System.Int32})">
            <summary>
            在完成死亡结算后 [ 全体广播 ]
            </summary>
            <param name="death"></param>
            <param name="killer"></param>
            <param name="continuousKilling"></param>
            <param name="earnedMoney"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnEvadedTriggered(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            在触发闪避时
            </summary>
            <param name="attacker"></param>
            <param name="evader"></param>
            <param name="dice"></param>
            <returns>返回 true 表示无视闪避</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnCriticalDamageTriggered(Milimoe.FunGame.Core.Entity.Character,System.Double)">
            <summary>
            在触发暴击时
            </summary>
            <param name="character"></param>
            <param name="dice"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.OnAttributeChanged(Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            角色属性发生变化
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.AlterEnemyListBeforeAction(Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Skill},System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Character,System.Int32},System.Collections.Generic.Dictionary{Milimoe.FunGame.Core.Entity.Character,System.Int32})">
            <summary>
            行动开始前，修改可选择的 <paramref name="enemys"/>, <paramref name="teammates"/>, <paramref name="skills"/> 列表<para/>
            注意 <paramref name="continuousKilling"/> 和 <paramref name="earnedMoney"/> 是副本，修改无效
            </summary>
            <param name="character"></param>
            <param name="enemys"></param>
            <param name="teammates"></param>
            <param name="skills"></param>
            <param name="continuousKilling"></param>
            <param name="earnedMoney"></param>
            <returns>返回 true 表示更改生效</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.DamageToEnemy(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType,System.Double)">
            <summary>
            对敌人造成技能伤害 [ 强烈建议使用此方法造成伤害而不是自行调用 <see cref="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.DamageToEnemy(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character,System.Double,System.Boolean,System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType,Milimoe.FunGame.Core.Library.Constant.DamageResult)"/> ]
            </summary>
            <param name="actor"></param>
            <param name="enemy"></param>
            <param name="isMagic"></param>
            <param name="magicType"></param>
            <param name="expectedDamage"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.InterruptCasting(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            打断施法 [ 尽可能的调用此方法而不是直接调用 <see cref="M:Milimoe.FunGame.Core.Api.Utility.ActionQueue.InterruptCasting(Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character)"/>，以防止中断性变更 ]
            </summary>
            <param name="caster"></param>
            <param name="interrupter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.ToString">
            <summary>
            返回特效详情
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Effect.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            比较两个特效
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Name">
            <summary>
            普通攻击名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Description">
            <summary>
            普通攻击说明
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Character">
            <summary>
            所属的角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Damage">
            <summary>
            普通攻击的伤害
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.Level">
            <summary>
            普通攻击等级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.IsMagic">
            <summary>
            是否是魔法伤害
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.MagicType">
            <summary>
            魔法伤害需要指定魔法类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.NormalAttack.HardnessTime">
            <summary>
            硬直时间
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.Attack(Milimoe.FunGame.Core.Api.Utility.ActionQueue,Milimoe.FunGame.Core.Entity.Character,Milimoe.FunGame.Core.Entity.Character[])">
            <summary>
            对目标（或多个目标）发起普通攻击
            </summary>
            <param name="queue"></param>
            <param name="attacker"></param>
            <param name="enemys"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.NormalAttack.SetMagicType(System.Boolean,Milimoe.FunGame.Core.Library.Constant.MagicType)">
            <summary>
            修改伤害类型
            </summary>
            <param name="isMagic"></param>
            <param name="magicType"></param>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.NormalAttack._Level">
            <summary>
            等级
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.NormalAttack._IsMagic">
            <summary>
            是否是魔法伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.NormalAttack._MagicType">
            <summary>
            魔法类型
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.Skill">
            <summary>
            与 <see cref="P:Milimoe.FunGame.Core.Entity.Skill.Character"/> 不同，构造技能时，建议继承此类再构造
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Character">
            <summary>
            此技能所属的角色
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Description">
            <summary>
            技能描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Level">
            <summary>
            技能等级，等于 0 时可以称之为尚未学习
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.SkillType">
            <summary>
            技能类型 [ 此项为最高优先级 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.IsActive">
            <summary>
            是否是主动技能 [ 此项为高优先级 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Enable">
            <summary>
            是否可用 [ 此项为高优先级 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.IsInEffect">
            <summary>
            效果持续生效中 [ 此项为高优先级 ] [ 此项设置为true后不允许再次释放，防止重复释放 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.IsSuperSkill">
            <summary>
            是否是爆发技 [ 此项为高优先级 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.IsMagic">
            <summary>
            是否属于魔法 [ <see cref="P:Milimoe.FunGame.Core.Entity.Skill.IsActive"/> 必须为 true ]，反之为战技
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.MPCost">
            <summary>
            魔法消耗 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.BaseMPCost">
            <summary>
            基础魔法消耗 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CastTime">
            <summary>
            吟唱时间 [ 魔法 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.EPCost">
            <summary>
            能量消耗 [ 战技 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.BaseEPCost">
            <summary>
            基础能量消耗 [ 战技 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CD">
            <summary>
            冷却时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.CurrentCD">
            <summary>
            剩余冷却时间 [ 建议配合 <see cref="P:Milimoe.FunGame.Core.Entity.Skill.Enable"/>  属性使用 ]
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.HardnessTime">
            <summary>
            硬直时间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.Effects">
            <summary>
            效果列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.OtherArgs">
            <summary>
            其他参数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Entity.Skill.ActionQueue">
            <summary>
            游戏中的行动顺序表实例，在技能效果被触发时，此实例会获得赋值，使用时需要判断其是否存在
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.#ctor(Milimoe.FunGame.Core.Library.Constant.SkillType,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            继承此类实现时，调用基类的构造函数
            </summary>
            <param name="type"></param>
            <param name="character"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.#ctor">
            <summary>
            用于构造 JSON
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnLevelUp">
            <summary>
            触发技能升级
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnSkillGained(Milimoe.FunGame.Core.Api.Utility.ActionQueue)">
            <summary>
            当获得技能时
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnSkillCasting(Milimoe.FunGame.Core.Api.Utility.ActionQueue,Milimoe.FunGame.Core.Entity.Character)">
            <summary>
            技能开始吟唱时 [ 吟唱魔法、释放战技和爆发技、预释放爆发技均可触发 ]
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.OnSkillCasted(Milimoe.FunGame.Core.Api.Utility.ActionQueue,Milimoe.FunGame.Core.Entity.Character,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character},System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.Character})">
            <summary>
            触发技能效果
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.AddInactiveEffectToCharacter">
            <summary>
            被动技能，需要重写此方法，返回被动特效给角色 [ 此方法会在技能学习时触发 ]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.ToString">
            <summary>
            返回技能的详细说明
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Entity.Skill.Equals(Milimoe.FunGame.Core.Interface.Entity.IBaseEntity)">
            <summary>
            判断两个技能是否相同 检查Id.Name
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Entity.Skill._Level">
            <summary>
            等级
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Entity.UserStatistics">
            <summary>
            记录 <see cref="T:Milimoe.FunGame.Core.Entity.User"/> 的生涯、赛季统计数据<para/>
            Key为赛季(long)，每个key代表第key赛季，key = 0时为生涯数据。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.Running">
            <summary>
            服务器实例是否在运行
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.Socket">
            <summary>
            客户端的套接字实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.User">
            <summary>
            客户端的用户实例，在用户登录后有效
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.ClientName">
            <summary>
            客户端的名称，默认是客户端的IP地址
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.Base.IServerModel.IsDebugMode">
            <summary>
            客户端是否启动了开发者模式
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.Send(Milimoe.FunGame.Core.Library.Common.Network.ClientSocket,Milimoe.FunGame.Core.Library.Constant.SocketMessageType,System.Object[])">
            <summary>
            向客户端发送消息
            </summary>
            <param name="socket"></param>
            <param name="type"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.SendSystemMessage(Milimoe.FunGame.Core.Library.Constant.ShowMessageType,System.String,System.String,System.Int32,System.String[])">
            <summary>
            向客户端发送系统消息
            </summary>
            <param name="showtype"></param>
            <param name="msg"></param>
            <param name="title"></param>
            <param name="autoclose"></param>
            <param name="usernames"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.GetClientName">
            <summary>
            获取客户端的名称，通常未登录时显示为客户端的IP地址，登录后显示为账号名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.Read(Milimoe.FunGame.Core.Library.Common.Network.ClientSocket)">
            <summary>
            开始接收客户端消息
            <para>请勿在 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer"/> 中调用此方法</para>
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Interface.Base.IServerModel.Start">
            <summary>
            启动对客户端的监听
            <para>请勿在 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer"/> 中调用此方法</para>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.IEventHandler">
            <summary>
            窗体继承这些接口便能实现事件，或为插件预留。
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.IGamingEventHandler">
            <summary>
            局内事件的接口，与 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 配套使用
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.IClient">
            <summary>
            这是最基本的接口，要求客户端实现
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Interface.IServer">
            <summary>
            服务器需要实现此接口
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Interface.IServer.SecretKey">
            <summary>
            一个服务器标识秘钥
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Name">
            <summary>
            模组名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Characters">
            <summary>
            此模组中包含的角色
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.AfterLoad">
            <summary>
            模组加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.BeforeLoad">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleConstant">
            <summary>
            建议使用一个类来存储常量，方便重用
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModule">
            <summary>
            模组：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/><para/>
            继承事件接口并实现其方法来使模组生效。例如继承：<seealso cref="T:Milimoe.FunGame.Core.Interface.IGamingUpdateInfoEvent"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleServer">
            <summary>
            模组服务器：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer"/><para/>
            使用switch块分类处理 <see cref="T:Milimoe.FunGame.Core.Library.Constant.GamingType"/>。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameModuleServer.Name">
            <summary>
            注意：服务器模组的名称必须和模组名称相同。除非你指定了 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.IsConnectToOtherServerModule"/> 和 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.AssociatedServerModuleName"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleGameMap">
            <summary>
            地图：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameMap"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleCharacterModule">
            <summary>
            角色：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleSkillModule">
            <summary>
            技能：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExampleItemModule">
            <summary>
            物品：必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule"/><para/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.Example.ExamplePlugin">
            <summary>
            必须继承基类：<see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.Plugin"/><para/>
            继承事件接口并实现其方法来使插件生效。例如继承：<seealso cref="T:Milimoe.FunGame.Core.Interface.ILoginEvent"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Name">
            <summary>
            地图名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Description">
            <summary>
            地图描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Version">
            <summary>
            地图版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Author">
            <summary>
            地图作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Size">
            <summary>
            格子大小
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Grids">
            <summary>
            格子集
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Item(System.Single,System.Single,System.Single)">
            <summary>
            使用坐标获取格子，0号格子的坐标是(0, 0)，如果你还有高度的话，则是(0, 0, 0)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Item(System.Int32)">
            <summary>
            使用坐标获取格子，从0号开始
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Load(System.Object[])">
            <summary>
            加载地图
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.AfterLoad">
            <summary>
            加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.BeforeLoad">
            <summary>
            允许返回false来阻止加载此地图
            </summary>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Name">
            <summary>
            模组名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.DefaultMap">
            <summary>
            默认地图
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.GameModuleDepend">
            <summary>
            模组的依赖集合
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.RoomType">
            <summary>
            适用的房间模式
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.IsConnectToOtherServerModule">
            <summary>
            是否连接其他的服务器模组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.AssociatedServerModuleName">
            <summary>
            如果将 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.IsConnectToOtherServerModule"/> 设置为true，那么此属性必须指定一个存在的服务器模组的 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Name"/> 名称。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Controller">
            <summary>
            包含了一些常用方法的控制器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Milimoe#FunGame#Core#Interface#Addons#IAddonController{Milimoe#FunGame#Core#Interface#Addons#IGameModule}#Controller">
            <summary>
            base控制器，没有DataRequest
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule._Controller">
            <summary>
            控制器内部变量
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.StartGame(Milimoe.FunGame.Core.Model.Gaming,System.Object[])">
            <summary>
            必须重写此方法，游戏的主要逻辑写在这里面<para/>
            此方法会在 <see cref="M:Milimoe.FunGame.Core.Model.Gaming.StartGame(Milimoe.FunGame.Core.Library.Common.Addon.GameModule,Milimoe.FunGame.Core.Entity.Room,Milimoe.FunGame.Core.Entity.User,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.User},Milimoe.FunGame.Core.Api.Utility.GameModuleLoader,System.Object[])"/> 时调用<para/>
            </summary>
            <param name="instance"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.StartUI(System.Object[])">
            <summary>
            如模组有界面，请重写此方法
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.AfterLoad">
            <summary>
            模组加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.BeforeLoad">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Init(System.Object[])">
            <summary>
            传递委托以便让模组调用
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Session">
            <summary>
            Session对象
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Config">
            <summary>
            Config对象
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModule._AssociatedServerModuleName">
            <summary>
            关联的服务器模组名称
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.BindEvent">
            <summary>
            绑定事件。在<see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.BeforeLoad"/>后触发
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend">
            <summary>
            模组的依赖集合<para/>
            <paramref name="maps"></paramref>（地图名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Name"/>）的数组）<para/>
            <paramref name="characters"></paramref>（角色模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Name"/>）的数组）<para/>
            <paramref name="skills"></paramref>（技能模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Name"/>）的数组）<para/>
            <paramref name="items"></paramref>（物品模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Name"/>）的数组）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.#ctor(System.String[],System.String[],System.String[],System.String[])">
            <summary>
            模组的依赖集合<para/>
            <paramref name="maps"></paramref>（地图名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameMap.Name"/>）的数组）<para/>
            <paramref name="characters"></paramref>（角色模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule.Name"/>）的数组）<para/>
            <paramref name="skills"></paramref>（技能模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Name"/>）的数组）<para/>
            <paramref name="items"></paramref>（物品模组名称（<see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Name"/>）的数组）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.MapsDepend">
            <summary>
            模组所使用的地图组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.CharactersDepend">
            <summary>
            模组所使用的角色组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.SkillsDepend">
            <summary>
            模组所使用的技能组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.ItemsDepend">
            <summary>
            模组所使用的物品组
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Maps">
            <summary>
            实际使用的地图组对象<para/>
            请使用 <see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)"/> 自动填充，不要自己添加
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Characters">
            <summary>
            实际使用的角色组对象<para/>
            请使用 <see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)"/> 自动填充，不要自己添加
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Skills">
            <summary>
            实际使用的技能组对象<para/>
            请使用 <see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)"/> 自动填充，不要自己添加
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Items">
            <summary>
            实际使用的物品组对象<para/>
            请使用 <see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)"/> 自动填充，不要自己添加
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.GetDependencies(Milimoe.FunGame.Core.Api.Utility.GameModuleLoader)">
            <summary>
            获得所有的依赖项<para/>
            此方法会自动填充 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Maps"/> <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Characters"/> <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Skills"/> <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleDepend.Items"/>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Name">
            <summary>
            服务器模组的名称<para/>
            如果服务器模组配合一个相关联的模组使用，那么它们的 <see cref="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModule.Name"/> 名称必须相同。
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.DefaultMap">
            <summary>
            默认地图
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.GameModuleDepend">
            <summary>
            模组的依赖集合
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Controller">
            <summary>
            包含了一些常用方法的控制器
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer._Controller">
            <summary>
            控制器内部变量
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.StartServer(System.String,Milimoe.FunGame.Core.Entity.Room,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.User},Milimoe.FunGame.Core.Interface.Base.IServerModel,System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Interface.Base.IServerModel},System.Object[])">
            <summary>
            启动服务器监听 请在此处实现服务器逻辑
            </summary>
            <param name="GameModule"></param>
            <param name="Room"></param>
            <param name="Users"></param>
            <param name="RoomMasterServerModel"></param>
            <param name="ServerModels"></param>
            <param name="Args"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.GamingMessageHandler(System.String,Milimoe.FunGame.Core.Library.Constant.GamingType,System.Collections.Hashtable)">
            <summary>
            接收并处理GamingMessage
            </summary>
            <param name="username">发送此消息的账号</param>
            <param name="type">消息类型</param>
            <param name="data">消息参数</param>
            <returns>底层会将哈希表中的数据发送给客户端</returns>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.AfterLoad">
            <summary>
            模组加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer.BeforeLoad">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Id">
            <summary>
            格子编号
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.X">
            <summary>
            格子在地图中的x坐标
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Y">
            <summary>
            格子在地图中的y坐标
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Z">
            <summary>
            格子在地图中的z坐标
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Characters">
            <summary>
            是谁站在这格子上？
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Skills">
            <summary>
            此格子目前受到了什么影响？或者它有什么技能…
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Grid.Color">
            <summary>
            此格子呈现的颜色（默认为 <see cref="P:System.Drawing.Color.Gray"/> ）
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Name">
            <summary>
            模组名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Items">
            <summary>
            此模组中包含的物品
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.AfterLoad">
            <summary>
            模组加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.ItemModule.BeforeLoad">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Name">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Description">
            <summary>
            插件描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Version">
            <summary>
            插件版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Author">
            <summary>
            插件作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Controller">
            <summary>
            包含了一些常用方法的控制器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Milimoe#FunGame#Core#Interface#Addons#IAddonController{Milimoe#FunGame#Core#Interface#Addons#IPlugin}#Controller">
            <summary>
            base控制器，没有DataRequest
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.Plugin._Controller">
            <summary>
            控制器内部变量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Load(System.Object[])">
            <summary>
            加载插件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.AfterLoad">
            <summary>
            插件加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.BeforeLoad">
            <summary>
            允许返回false来阻止加载此插件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Init(System.Object[])">
            <summary>
            传递委托以便让插件调用
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Session">
            <summary>
            Session对象
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.Config">
            <summary>
            Config对象
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.BindEvent">
            <summary>
            绑定事件。在<see cref="M:Milimoe.FunGame.Core.Library.Common.Addon.Plugin.BeforeLoad"/>后触发
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Name">
            <summary>
            模组名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Description">
            <summary>
            模组描述
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Version">
            <summary>
            模组版本
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Author">
            <summary>
            模组作者
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Skills">
            <summary>
            此模组中包含的技能
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.IsLoaded">
            <summary>
            加载标记
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.Load(System.Object[])">
            <summary>
            加载模组
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.AfterLoad">
            <summary>
            模组加载后需要做的事
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Addon.SkillModule.BeforeLoad">
            <summary>
            允许返回false来阻止加载此模组
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1">
            <summary>
            继承这个类可以获得异步等待的功能
            <para>参考实现 <see cref="T:Milimoe.FunGame.Core.Controller.SocketHandlerController"/></para>
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.Work">
            <summary>
            接收到的实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.Working">
            <summary>
            是否处于等待的状态
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.SetWorking">
            <summary>
            异步操作前，请设置为等待状态
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.WaitForWorkDone">
            <summary>
            等待任务完成（需要自己异步）
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.AsyncAwaiter`1.WaitForWorkDoneAsync">
            <summary>
            异步等待任务完成
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter">
            <summary>
            任务的等待器，可以设置在任务完成后需要的操作
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.IsCompleted">
            <summary>
            任务是否完成
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.Exception">
            <summary>
            捕获到的异常
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.awaiter">
            <summary>
            <para>内部实现类</para>
            实现参见 <see cref="T:Milimoe.FunGame.Core.Service.TaskManager.TaskAwaiter"/>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.#ctor(Milimoe.FunGame.Core.Interface.Base.ITaskAwaiter)">
            <summary>
            构造一个等待器
            </summary>
            <param name="awaiter"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.OnCompleted(System.Action)">
            <summary>
            返回TaskAwaiter可以连续的调用方法<para/>
            但是意义不大，前一个OnCompleted方法并不会等待下一个方法<para/>
            可以理解为并行广播<para/>
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Architecture.TaskAwaiter.OnError(System.Action{System.Exception})">
            <summary>
            在捕获到异常时，将触发Error事件
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Sender">
            <summary>
            发件人邮箱
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.SenderName">
            <summary>
            发件人名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Subject">
            <summary>
            邮件主题
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Body">
            <summary>
            邮件内容
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Priority">
            <summary>
            邮件优先级
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.HTML">
            <summary>
            内容是否支持HTML
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.ToList">
            <summary>
            收件人列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.CCList">
            <summary>
            抄送列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Common.Network.MailObject.BCCList">
            <summary>
            密送列表
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(Milimoe.FunGame.Core.Api.Transmittal.MailSender)">
            <summary>
            使用MailSender工具类创建邮件对象
            </summary>
            <param name="Sender"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(System.String,System.String)">
            <summary>
            使用地址和名称创建邮件对象
            </summary>
            <param name="Sender"></param>
            <param name="SenderName"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(Milimoe.FunGame.Core.Api.Transmittal.MailSender,System.String,System.String,System.String)">
            <summary>
            使用地址和名称创建邮件对象，同时写主题、内容、单个收件人
            </summary>
            <param name="Sender"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="To"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(Milimoe.FunGame.Core.Api.Transmittal.MailSender,System.String,System.String,System.String,System.String)">
            <summary>
            使用地址和名称创建邮件对象，同时写主题、内容、单个收件人、单个抄送
            </summary>
            <param name="Sender"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="To"></param>
            <param name="CC"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.#ctor(Milimoe.FunGame.Core.Api.Transmittal.MailSender,System.String,System.String,System.Net.Mail.MailPriority,System.Boolean,System.String[],System.String[],System.String[])">
            <summary>
            完整的创建邮件对象
            </summary>
            <param name="Sender"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="Priority"></param>
            <param name="HTML"></param>
            <param name="ToList"></param>
            <param name="CCList"></param>
            <param name="BCCList"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.Send(Milimoe.FunGame.Core.Api.Transmittal.MailSender)">
            <summary>
            发送邮件
            -- 适合创建一次性邮件并发送 --
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddTo(System.String)">
            <summary>
            添加收件人
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddTo(System.String[])">
            <summary>
            添加多个收件人
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddCC(System.String)">
            <summary>
            添加抄送
            </summary>
            <param name="cc"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddCC(System.String[])">
            <summary>
            添加多个抄送
            </summary>
            <param name="cc"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddBCC(System.String)">
            <summary>
            添加密送
            </summary>
            <param name="bcc"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.MailObject.AddBCC(System.String[])">
            <summary>
            添加多个密送
            </summary>
            <param name="bcc"></param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Common.Network.SocketObject.GetParam``1(System.Int32)">
            <summary>
            从参数列表中获取指定类型和索引的参数
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="index">索引</param>
            <returns>类型的参数</returns>
            <exception cref="T:Milimoe.FunGame.IndexOutOfArrayLengthException">索引超过数组上限</exception>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.InterfaceSet">
            <summary>
            配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceMethod"/> <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceType"/> 使用，也别忘了修改 <see cref="T:Milimoe.FunGame.Core.Api.Utility.Implement"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.SocketSet">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.SocketMessageType"/>
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.SocketSet.GetTypeString(Milimoe.FunGame.Core.Library.Constant.SocketMessageType)">
            <summary>
            将通信类型的枚举转换为字符串
            </summary>
            <param name="type">通信类型</param>
            <returns>等效字符串</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.DataRequestSet">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.DataRequestType"/>
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.RunTime_Logout">
            RunTime
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Main_GetNotice">
            Main
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Reg_GetRegVerifyCode">
            Register
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Login_Login">
            Login
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Room_GetRoomSettings">
            Room
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.Gaming">
            Gaming
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.DataRequestSet.GetTypeString(Milimoe.FunGame.Core.Library.Constant.DataRequestType)">
            <summary>
            获取Type的等效字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.GamingSet.GetTypeString(Milimoe.FunGame.Core.Library.Constant.GamingType)">
            <summary>
            获取Type的等效字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.RoomSet.GetTypeString(Milimoe.FunGame.Core.Library.Constant.RoomType)">
            <summary>
            获取Type的等效字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Library.Constant.RoomSet.GetRoomType(System.String)">
            <summary>
            获取字符串对应的枚举
            </summary>
            <param name="typestring"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.FunGameInfo.FunGame_DebugMode">
            <summary>
            添加-debug启动项将开启DebugMode（仅适用于Desktop或Console）
            <para>目前支持禁用心跳检测功能</para>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.General">
            <summary>
            此类保存常用的对象常量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.EntityInstance">
            <summary>
            空的实体类 用于object返回
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.UnknownUserInstance">
            <summary>
            默认的未知用户
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.GuestUserInstance">
            <summary>
            游客用户
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.LocalUserInstance">
            <summary>
            本地用户
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.HallInstance">
            <summary>
            大厅（空房间）实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.DefaultEncoding">
            <summary>
            默认的字符编码
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.GeneralDateTimeFormat">
            <summary>
            默认的时间格式
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Library.Constant.General.DefaultTime">
            <summary>
            默认的时间值（1970年8月1日8点0分0秒）
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.MaxRetryTimes">
            <summary>
            最多自动重试连接次数
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.MaxTask_1C2G">
            <summary>
            1C2G推荐的任务数量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.MaxTask_2C2G">
            <summary>
            2C2G推荐的任务数量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.MaxTask_4C4G">
            <summary>
            4C4G推荐的任务数量
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.SocketByteSize">
            <summary>
            默认Socket数据包大小
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.General.StreamByteSize">
            <summary>
            默认Stream传输大小
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.InterfaceMethod">
            <summary>
            配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceType"/> <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceSet"/> 使用，也别忘了修改 <see cref="T:Milimoe.FunGame.Core.Api.Utility.Implement"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.InterfaceType">
            <summary>
            配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceMethod"/> <see cref="T:Milimoe.FunGame.Core.Library.Constant.InterfaceSet"/> 使用，也别忘了修改 <see cref="T:Milimoe.FunGame.Core.Api.Utility.Implement"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.RoomType">
            <summary>
            配合 <see cref="T:Milimoe.FunGame.Core.Library.Constant.RoomSet"/> 使用
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.SocketMessageType">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.SocketSet"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.DataRequestType">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.DataRequestSet"/>
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.GamingType">
            <summary>
            需要同步更新 <see cref="T:Milimoe.FunGame.Core.Library.Constant.GamingSet"/>
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.SkillType.Magic">
            <summary>
            魔法，编号 1xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.SkillType.Skill">
            <summary>
            战技，编号 2xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.SkillType.SuperSkill">
            <summary>
            爆发技，编号 3xxx
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.SkillType.Passive">
            <summary>
            被动，编号 4xxx
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.EffectControlType">
            <summary>
            注意：具有控制效果的特效，应该和技能本身的特效(一般此项为None)区分开来。此效果被赋值会改变一些判断的结果。
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.None">
            <summary>
            无特殊效果
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Mark">
            <summary>
            标记，目标受到某些技能的标记
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Stun">
            <summary>
            眩晕，目标无法行动
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Freeze">
            <summary>
            冰冻，目标无法行动
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Silence">
            <summary>
            沉默，目标无法使用技能
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Root">
            <summary>
            定身
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Fear">
            <summary>
            恐惧
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Sleep">
            <summary>
            睡眠，目标暂时无法行动，受到伤害后会苏醒
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Knockback">
            <summary>
            击退
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Knockdown">
            <summary>
            击倒，目标被击倒在地，暂时无法行动
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Taunt">
            <summary>
            嘲讽，目标被迫攻击施法者
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Slow">
            <summary>
            减速，目标行动速度和攻击频率降低
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Weaken">
            <summary>
            衰弱，目标的攻击和防御降低
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Poison">
            <summary>
            中毒，目标在一段时间内持续受到伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Burn">
            <summary>
            燃烧，目标受到火焰伤害，持续一段时间
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Bleed">
            <summary>
            流血，目标持续受到物理伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Blind">
            <summary>
            致盲，目标无法准确攻击，命中率降低
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Cripple">
            <summary>
            致残，减少目标的行动或攻击能力
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Shield">
            <summary>
            护盾，减少受到的伤害或抵消部分伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.HealOverTime">
            <summary>
            持续治疗，逐步恢复生命值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Haste">
            <summary>
            加速，提升行动速度和攻击频率
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Invulnerable">
            <summary>
            无敌，暂时不会受到任何伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Unselectable">
            <summary>
            不可选中，无法成为普攻和技能的目标
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.DamageBoost">
            <summary>
            伤害提升，增加攻击输出
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.DefenseBoost">
            <summary>
            防御提升，减少所受伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.CritBoost">
            <summary>
            暴击提升，增加暴击率或暴击伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.ManaRegen">
            <summary>
            魔法恢复，增加魔法值回复速度
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.ArmorBreak">
            <summary>
            破甲，降低目标的防御值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.MagicResistBreak">
            <summary>
            降低魔法抗性，目标更容易受到魔法伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Curse">
            <summary>
            诅咒，降低目标的属性或给予负面效果
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Exhaustion">
            <summary>
            疲劳，减少目标的攻击或技能效果
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.ManaBurn">
            <summary>
            魔力燃烧，消耗目标的魔法值
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Charm">
            <summary>
            魅惑，控制目标替施法者作战
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Disarm">
            <summary>
            缴械，目标无法进行普通攻击
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Confusion">
            <summary>
            混乱，目标的行动变得随机化
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Petrify">
            <summary>
            石化，目标无法行动，并大幅增加受到的伤害
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.SilenceMagic">
            <summary>
            法术沉默，目标无法施放魔法技能
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Banish">
            <summary>
            放逐，目标暂时无法被攻击，也无法行动
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.EffectControlType.Doom">
            <summary>
            毁灭，目标在倒计时结束后受到大量伤害或死亡
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Library.Constant.CharacterState">
            <summary>
            角色目前所处的状态
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.Actionable">
            <summary>
            可以行动 [ 战斗相关 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.NotActionable">
            <summary>
            完全行动不能 [ 战斗相关 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.ActionRestricted">
            <summary>
            行动受限 [ 战斗相关 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.BattleRestricted">
            <summary>
            战斗不能 [ 战斗相关 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.SkillRestricted">
            <summary>
            技能受限 [ 战斗相关 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.Casting">
            <summary>
            处于吟唱中 [ 战斗相关 ] [ 技能相关 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.Constant.CharacterState.PreCastSuperSkill">
            <summary>
            预释放爆发技(插队) [ 战斗相关 ] [ 技能相关 ]
            </summary>
        </member>
        <member name="F:Milimoe.FunGame.Core.Library.SQLScript.Constant.Command_Select">
            Commands
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isAutoConnect">
            <summary>
            是否自动连接服务器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isAutoLogin">
            <summary>
            是否自动登录
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isMatching">
            <summary>
            是否在匹配中
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isConnected">
            <summary>
            是否连接上服务器
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isRetrying">
            <summary>
            是否正在重连
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isAutoRetry">
            <summary>
            是否自动重连
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_isInRoom">
            <summary>
            是否在房间中
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_RoomType">
            <summary>
            当前所处的房间类型
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_ServerName">
            <summary>
            服务器名称
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_Notice">
            <summary>
            公告
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_AutoLoginUser">
            <summary>
            自动登录的账号
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_AutoLoginPassword">
            <summary>
            自动登录的密码
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.FunGameConfig.FunGame_AutoLoginKey">
            <summary>
            自动登录的秘钥
            </summary>
        </member>
        <member name="T:Milimoe.FunGame.Core.Model.Gaming">
            <summary>
            游戏局内类
            客户端需要使用创建此类单例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Gaming.GameModule">
            <summary>
            使用的模组实例
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Gaming.EventArgs">
            <summary>
            游戏的参数
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Gaming.CurrentUser">
            <summary>
            此实例所属的玩家
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.Gaming.StartGame(Milimoe.FunGame.Core.Library.Common.Addon.GameModule,Milimoe.FunGame.Core.Entity.Room,Milimoe.FunGame.Core.Entity.User,System.Collections.Generic.List{Milimoe.FunGame.Core.Entity.User},Milimoe.FunGame.Core.Api.Utility.GameModuleLoader,System.Object[])">
            <summary>
            传入游戏所需的参数，构造一个Gaming实例
            </summary>
            <param name="module"></param>
            <param name="room"></param>
            <param name="user"></param>
            <param name="users"></param>
            <param name="loader"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Model.Gaming.GamingHandler(Milimoe.FunGame.Core.Library.Constant.GamingType,System.Collections.Hashtable)">
            <summary>
            需在RunTimeController的SocketHandler_Gaming方法中调用此方法
            <para>客户端也可以参照此方法自行实现</para>
            <para>此方法目的是为了触发 <see cref="T:Milimoe.FunGame.Core.Library.Common.Addon.GameModule"/> 的局内事件实现</para>
            </summary>
            <param name="type">消息类型</param>
            <param name="data">接收到的数据</param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.Server_Address">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.Server_Port">
            <summary>
            服务器端口号
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.SocketToken">
            <summary>
            SocketToken
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.LoginKey">
            <summary>
            LoginKey
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.LoginUser">
            <summary>
            已登录的用户
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.LoginUserName">
            <summary>
            已登录用户名
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Model.Session.InRoom">
            <summary>
            所处的房间
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.AddonManager.PluginFilePaths">
            <summary>
            已加载的插件DLL名称对应的路径
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.AddonManager.ModuleFilePaths">
            <summary>
            已加载的模组DLL名称对应的路径
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadPlugins(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.Plugin},System.Collections.Hashtable,System.Object[])">
            <summary>
            从plugins目录加载所有插件
            </summary>
            <param name="plugins"></param>
            <param name="delegates"></param>
            <param name="otherobjs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadGameModules(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.GameModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.SkillModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.ItemModule},System.Collections.Hashtable,System.Object[])">
            <summary>
            从modules目录加载所有模组
            </summary>
            <param name="modules"></param>
            <param name="characters"></param>
            <param name="skills"></param>
            <param name="items"></param>
            <param name="delegates"></param>
            <param name="otherobjs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadGameModulesForServer(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.GameModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.GameModuleServer},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.CharacterModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.SkillModule},System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.ItemModule},System.Collections.Hashtable,System.Object[])">
            <summary>
            从modules目录加载所有适用于服务器的模组
            </summary>
            <param name="modules"></param>
            <param name="servers"></param>
            <param name="characters"></param>
            <param name="skills"></param>
            <param name="items"></param>
            <param name="delegates"></param>
            <param name="otherobjs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.LoadGameMaps(System.Collections.Generic.Dictionary{System.String,Milimoe.FunGame.Core.Library.Common.Addon.GameMap},System.Object[])">
            <summary>
            从maps目录加载所有地图
            </summary>
            <param name="maps"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.AddonManager.AddAddonInstances``1(System.Type,System.Collections.Generic.Dictionary{System.String,``0},System.Func{``0,System.Boolean})">
            <summary>
            添加构造好的模组类实例到字典中
            </summary>
            <typeparam name="T">加载的类型</typeparam>
            <param name="type">循环程序集的类型</param>
            <param name="dictionary">实例的字典</param>
            <param name="isadd">加载时触发的检查方法，返回false不添加</param>
        </member>
        <member name="F:Milimoe.FunGame.Core.Service.JsonManager.GeneralOptions">
            <summary>
            默认的序列化选项
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetString``1(``0)">
            <summary>
            获取Json字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetString``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            获取Json字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.String)">
            <summary>
            反序列化Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象，使用 <paramref name="reader"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject(System.String)">
            <summary>
            反序列化Json对象，此方法可能无法返回正确的类型，请注意辨别
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Json对象，此方法可能无法返回正确的类型，请注意辨别
            </summary>
            <param name="json"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(Milimoe.FunGame.Core.Library.Common.Network.SocketObject,System.Int32)">
            <summary>
            反序列化SocketObject中索引为index的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:Milimoe.FunGame.IndexOutOfArrayLengthException"></exception>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Hashtable,System.String)">
            <summary>
            反序列化Hashtable中Key对应的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            反序列化IEnumerable中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化IEnumerable中的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="index"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObject``1(System.Collections.Hashtable,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化Hashtable中Key对应的Json对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObjects``1(System.String)">
            <summary>
            反序列化多个Json对象
            注意必须是相同的Json对象才可以使用此方法解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.GetObjects``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化多个Json对象
            注意必须是相同的Json对象才可以使用此方法解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.JsonManager.IsCompleteJson``1(System.String)">
            <summary>
            检查字符串是否为完整的JSON对象
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.MailManager.SmtpClients">
            <summary>
            用于保存Smtp客户端
            一个邮件服务对应一个Smtp客户端
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.MailManager.MailSenders">
            <summary>
            用于保存邮件服务
            允许服务器同时存在多个服务
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.MailManager.GetSender(System.Guid)">
            <summary>
            获取某个已经保存过的邮件服务
            </summary>
            <param name="MailSenderID"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.MailManager.Send(Milimoe.FunGame.Core.Api.Transmittal.MailSender,Milimoe.FunGame.Core.Library.Common.Network.MailObject,System.String@)">
            <summary>
            统一调用此方法发送邮件
            </summary>
            <param name="Sender"></param>
            <param name="Mail"></param>
            <param name="ErrorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.MailManager.Dispose(Milimoe.FunGame.Core.Api.Transmittal.MailSender)">
            <summary>
            关闭邮件服务
            </summary>
            <param name="Sender"></param>
            <returns></returns>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.ModelManager`1.Count">
            <summary>
            目前的Model数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.ModelManager`1.MaxModel">
            <summary>
            最大接受的Model数量
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.ModelManager`1.Models">
            <summary>
            可参与高并发的字典，但添加效率较低
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.ModelManager`1.#ctor(System.Int32)">
            <summary>
            Init ModelManager
            </summary>
            <param name="MaxModel">MaxModel</param>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.ModelManager`1.Item(System.String)">
            <summary>
            获取Model对象
            </summary>
            <param name="name">Model的Key</param>
            <returns>Model对象</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.ModelManager`1.Add(System.String,`0)">
            <summary>
            向Model管理器中添加Model
            </summary>
            <param name="name">Model的Key</param>
            <param name="t">Model对象</param>
            <returns>True：操作成功</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.ModelManager`1.Remove(System.String)">
            <summary>
            从Model管理器中移除Model
            </summary>
            <param name="name">Model的Key</param>
            <returns>True：操作成功</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.ModelManager`1.Remove(System.String,`0@)">
            <summary>
            将Model移除，并取得这个Model
            </summary>
            <param name="name">Model的Key</param>
            <param name="t">Model对象</param>
            <returns>被移除的Model</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.ModelManager`1.RemoveAndGet(System.String)">
            <summary>
            将Model移除，并取得这个Model
            </summary>
            <param name="name">Model的Key</param>
            <returns>被移除的Model</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.ModelManager`1.Clear">
            <summary>
            清空Model管理器
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.ModelManager`1.GetList">
            <summary>
            获取Model对象的列表
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.SocketManager.Socket">
            <summary>
            客户端专用Socket
            </summary>
        </member>
        <member name="P:Milimoe.FunGame.Core.Service.SocketManager.ServerSocket">
            <summary>
            服务器端专用Socket
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.StartListening(System.Int32,System.Int32)">
            <summary>
            创建服务器监听Socket
            </summary>
            <param name="Port">监听端口号</param>
            <param name="MaxConnection">最大连接数量</param>
            <returns>服务器端专用Socket</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Accept">
            <summary>
            创建一个监听到客户端Socket
            </summary>
            <returns>客户端IP地址[0]和客户端Socket[1]</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Connect(System.String,System.Int32)">
            <summary>
            创建客户端Socket
            </summary>
            <param name="Address">服务器IP地址</param>
            <param name="Port">服务器监听端口</param>
            <returns>客户端专用Socket</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Send(System.Net.Sockets.Socket,Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            用于服务器端向客户端Socket发送信息
            </summary>
            <param name="ClientSocket">客户端Socket</param>
            <param name="SocketObject">Socket信息容器</param>
            <returns>通信结果</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Send(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            用于客户端向服务器Socket发送信息
            </summary>
            <param name="SocketObject">Socket信息容器</param>
            <returns>通信结果</returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.Receive(System.Net.Sockets.Socket)">
            <summary>
            接收数据流中的信息
            <para/>如果是服务器接收信息需要传入客户端Socket <paramref name="ClientSocket"/>
            </summary>
            <param name="ClientSocket">如果是服务器接收信息需要传入客户端Socket</param>
            <returns>SocketObjects</returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Service.SocketManager.SocketReceiveHandler">
            <summary>
            监听事件的委托
            </summary>
            <param name="SocketObject">SocketObject</param>
        </member>
        <member name="E:Milimoe.FunGame.Core.Service.SocketManager.SocketReceive">
            <summary>
            监听事件
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.SocketManager.OnSocketReceive(Milimoe.FunGame.Core.Library.Common.Network.SocketObject)">
            <summary>
            触发异步监听事件
            </summary>
            <param name="SocketObject">SocketObject</param>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.TaskManager.NewTask(System.Action)">
            <summary>
            开启一个任务：调用返回对象的OnCompleted()方法可以执行后续操作，支持异步
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.TaskManager.NewTask(System.Func{System.Threading.Tasks.Task})">
            <summary>
            开启一个任务：调用返回对象的OnCompleted()方法可以执行后续操作，支持异步
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="T:Milimoe.FunGame.Core.Service.TaskManager.TaskAwaiter">
            <summary>
            内部实现类
            </summary>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.TaskManager.TaskAwaiter.OnCompleted(System.Action)">
            <summary>
            返回ITaskAwaiter可以进一步调用方法<para/>
            但是意义不大，前一个OnCompleted方法并不会等待下一个方法<para/>
            可以理解为并行广播<para/>
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Milimoe.FunGame.Core.Service.TaskManager.TaskAwaiter.OnError(System.Action{System.Exception})">
            <summary>
            在捕获到异常时，将触发Error事件
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
    </members>
</doc>
